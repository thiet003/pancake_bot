import json
import asyncio
import logging
import websockets
from typing import Dict, List, Callable, Any
import os
# C·∫•u h√¨nh logging
logger = logging.getLogger(__name__)

class PancakeWebSocketClient:
    """WebSocket client ƒë·ªÉ k·∫øt n·ªëi v·ªõi Pancake"""
    
    def __init__(self, access_token: str, user_id: str, page_ids: List[int]) -> None:
        self.access_token = access_token
        self.user_id = user_id
        self.page_ids = page_ids
        self.websocket = None
        self.ref_counter = 0
        self.event_handlers: Dict[str, List[Callable]] = {}
        self.connected = False
        self._should_reconnect = True  # Flag ƒë·ªÉ control reconnection
        logger.info(f"ƒê√£ kh·ªüi t·∫°o WebSocket client cho ng∆∞·ªùi d√πng {user_id}")
        
    def register_event_handlers(self, conversation_handler):
        """ƒêƒÉng k√Ω c√°c event handler cho nhi·ªÅu lo·∫°i s·ª± ki·ªán c√≥ th·ªÉ ƒë∆∞·ª£c s·ª≠ d·ª•ng"""
        self.on_event("pages:update_conversation", conversation_handler)
        
    def on_event(self, event_name: str, callback: Callable) -> None:
        """ƒêƒÉng k√Ω handler cho s·ª± ki·ªán"""
        if event_name not in self.event_handlers:
            self.event_handlers[event_name] = []
        self.event_handlers[event_name].append(callback)
        logger.info(f"‚úÖ ƒê√£ ƒëƒÉng k√Ω handler cho s·ª± ki·ªán {event_name}")
    
    def _get_next_ref(self) -> str:
        """L·∫•y ID tham chi·∫øu ti·∫øp theo cho tin nh·∫Øn"""
        self.ref_counter += 1
        return str(self.ref_counter)
    
    async def _send_message(self, channel: str, event: str, payload: dict) -> None:
        """G·ª≠i tin nh·∫Øn qua WebSocket"""
        if not self.websocket:
            raise ConnectionError("WebSocket ch∆∞a ƒë∆∞·ª£c k·∫øt n·ªëi")

        ref = self._get_next_ref()
        message = [ref, ref, channel, event, payload]

        try:
            await self.websocket.send(json.dumps(message))
            logger.debug(f"ƒê√£ g·ª≠i tin nh·∫Øn t·ªõi k√™nh {channel}, s·ª± ki·ªán: {event}")
        except Exception as e:
            logger.error(f"L·ªói khi g·ª≠i tin nh·∫Øn WebSocket: {e}")
            self.connected = False
            raise
    
    async def _handle_message(self, message: str) -> None:
        """X·ª≠ l√Ω tin nh·∫Øn WebSocket ƒë·∫øn"""
        try:
            data = json.loads(message)
            
            # Ki·ªÉm tra c·∫•u tr√∫c d·ªØ li·ªáu tr∆∞·ªõc khi truy c·∫≠p
            if not isinstance(data, list) or len(data) < 4:
                logger.warning(f"ƒê·ªãnh d·∫°ng tin nh·∫Øn kh√¥ng h·ª£p l·ªá: {message[:100]}...")
                return
                
            # Tr√≠ch xu·∫•t th√¥ng tin t·ª´ tin nh·∫Øn
            ref = data[0] if len(data) > 0 else None
            channel = data[2] if len(data) > 2 else None
            event = data[3] if len(data) > 3 else None 
            payload = data[4] if len(data) > 4 else {}
            
            # Log chi ti·∫øt v·ªÅ s·ª± ki·ªán nh·∫≠n ƒë∆∞·ª£c
            logger.info(f"üì© Nh·∫≠n ƒë∆∞·ª£c s·ª± ki·ªán WebSocket: k√™nh={channel}, event={event}, payload: {str(payload)}")
            
            # X·ª≠ l√Ω d·ª±a tr√™n event
            if event:
                handlers = self.event_handlers.get(event, [])
                
                if handlers:
                    logger.info(f"T√¨m th·∫•y {len(handlers)} handler cho s·ª± ki·ªán {event}")
                    for handler in handlers:
                        try:
                            if asyncio.iscoroutinefunction(handler):
                                await handler(payload)
                            else:
                                handler(payload)
                        except Exception as e:
                            logger.error(f"L·ªói trong handler cho s·ª± ki·ªán {event}: {e}", exc_info=True)
                else:
                    logger.debug(f"Kh√¥ng c√≥ handler cho s·ª± ki·ªán {event}")
        except json.JSONDecodeError:
            logger.error(f"JSON kh√¥ng h·ª£p l·ªá trong tin nh·∫Øn: {message[:100]}...")
        except Exception as e:
            logger.error(f"L·ªói khi x·ª≠ l√Ω tin nh·∫Øn: {e}", exc_info=True)
    
    async def connect(self) -> None:
        """K·∫øt n·ªëi ƒë·∫øn WebSocket v√† duy tr√¨ k·∫øt n·ªëi"""
        uri = "wss://pages.fm/socket/websocket?vsn=2.0.0"
        
        # V√≤ng l·∫∑p k·∫øt n·ªëi
        while self._should_reconnect:
            try:
                # K·∫øt n·ªëi v·ªõi ping interval v√† timeout
                async with websockets.connect(
                    uri, 
                    ping_interval=30,
                    ping_timeout=10
                ) as websocket:
                    self.websocket = websocket
                    self.connected = True
                    logger.info("‚úÖ ƒê√£ k·∫øt n·ªëi ƒë·∫øn WebSocket")

                    # Tham gia k√™nh ng∆∞·ªùi d√πng cho m·ªói access token
                    user_channel = f"users:{self.user_id}"
                    await self._send_message(user_channel, "phx_join", {
                        "accessToken": self.access_token,
                        "userId": self.user_id,
                        "platform": "web"
                    })

                    # C≈©ng ƒëƒÉng k√Ω k√™nh cho t·ª´ng trang ri√™ng l·∫ª
                    for page_id in self.page_ids:
                        page_channel = f"pages:{page_id}"
                        logger.info(f"Tham gia k√™nh trang {page_channel}")
                        
                        await self._send_message(page_channel, "phx_join", {
                            "accessToken": self.access_token,
                            "userId": self.user_id,
                            "pageId": str(page_id),
                            "platform": "web"
                        })
                    
                    logger.info(f"‚úÖ ƒê√£ tham gia c√°c k√™nh cho ng∆∞·ªùi d√πng {self.user_id} v√† c√°c trang {self.page_ids}")

                    # V√≤ng l·∫∑p l·∫Øng nghe tin nh·∫Øn
                    async for message in websocket:
                        # Non-blocking processing
                        asyncio.create_task(self._safe_handle_message(message))

            except websockets.exceptions.ConnectionClosed as e:
                if self._should_reconnect:
                    logger.warning(f"K·∫øt n·ªëi WebSocket ƒë√£ ƒë√≥ng: {e}")
                else:
                    logger.info("WebSocket ƒë√£ ƒë√≥ng theo y√™u c·∫ßu")
                    break
            except Exception as e:
                if self._should_reconnect:
                    logger.error(f"L·ªói k·∫øt n·ªëi WebSocket: {e}", exc_info=True)
                else:
                    logger.info("D·ª´ng WebSocket theo y√™u c·∫ßu")
                    break
            finally:
                self.websocket = None
                self.connected = False
                
            # Ch·ªâ ƒë·ª£i khi c·∫ßn reconnect
            if self._should_reconnect:
                logger.info("K·∫øt n·ªëi l·∫°i sau 5 gi√¢y...")
                await asyncio.sleep(5)
            else:
                logger.info("D·ª´ng reconnection loop")
                break

    async def _safe_handle_message(self, message: str) -> None:
        """Wrapper an to√†n cho vi·ªác x·ª≠ l√Ω tin nh·∫Øn"""
        try:
            await self._handle_message(message)
        except Exception as e:
            logger.error(f"L·ªói x·ª≠ l√Ω tin nh·∫Øn WebSocket: {e}", exc_info=True)

    async def close(self):
        """ƒê√≥ng k·∫øt n·ªëi WebSocket"""
        try:
            # D·ª´ng reconnection loop
            self._should_reconnect = False
            
            if self.websocket and not self.websocket.closed:
                await self.websocket.close()
                logger.info("ƒê√£ ƒë√≥ng k·∫øt n·ªëi WebSocket")
            self.connected = False
        except Exception as e:
            logger.error(f"L·ªói khi ƒë√≥ng WebSocket: {e}") 